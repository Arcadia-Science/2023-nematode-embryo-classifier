import json
import pathlib
import click
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import seaborn as sns
import sklearn.metrics

from embryostage.metadata import get_annotations_filepath
from embryostage.models import constants
from embryostage.models.data import EmbryoDataset


def _plot_confusion_matrix(true_labels, predicted_labels, labels):
    '''
    plot the confusion matrix for the given true and predicted labels
    '''

    confusion_matrix = sklearn.metrics.confusion_matrix(
        y_true=true_labels, y_pred=predicted_labels, labels=labels
    )

    # normalize the confusion matrix by row
    # (this means that each row will correspond to the distribution
    # of predicted labels for each true label)
    confusion_matrix = confusion_matrix.astype('float') / confusion_matrix.sum(axis=1)[:, None]

    # hack: replace NaNs with zeros
    # (which occur when there are no instances of a label in true_labels)
    confusion_matrix[np.isnan(confusion_matrix)] = 0

    plt.figure(figsize=(6, 6))
    sns.heatmap(
        confusion_matrix,
        annot=True,
        xticklabels=labels,
        yticklabels=labels,
        cmap='Blues',
        fmt='.2f',
        square=True,
        cbar=False,
    )
    plt.ylabel('True label')
    plt.xlabel('Predicted label')
    plt.title('Confusion matrix')


@click.option(
    '--predictions-filepath',
    type=pathlib.Path,
    help='The location of the predictions file (generated by batch_classify_embryos.py)',
)
@click.option(
    '--annotations-filepath',
    type=pathlib.Path,
    default=get_annotations_filepath(),
    help='The location of the annotations to use (defaults to the training annotations)',
)
@click.command()
def main(predictions_filepath, annotations_filepath):
    '''
    plot the confusion matrix for the predictions from a trained model
    given a set of manual annotations
    '''

    # load the manual annotations
    embryo_dataset = EmbryoDataset(
        data_dirpath='',
        channel_names=['raw'],
        annotations_csv=annotations_filepath,
        dataset_ids=None,
    )
    annotations = embryo_dataset.labels_df.copy()

    annotations.rename(
        columns={'frame': 'frame_ind', 'stage': 'annotated_label'}, inplace=True
    )

    # sanity check that the annotations are unique
    counts = annotations.groupby(['dataset_id', 'fov_id', 'embryo_id', 'frame_ind']).count()
    if not counts.loc[counts.annotated_label > 1].empty:
        ids = counts.loc[counts.annotated_label > 1].index.tolist()
        raise ValueError(
            f'The annotations for embryos {ids} multiple labels for the same frame. '
            'Check that the annotations are unique.'
        )

    with open(predictions_filepath, 'r') as file:
        data = json.load(file)

    preds = pd.DataFrame(data)

    # add a frame index to the labels
    preds['labels'] = preds.labels.apply(lambda labels: list(enumerate(labels)))

    # explode on the labels and split the frame index and label name to separate columns
    preds = preds.explode('labels')
    preds['frame_ind'] = preds.labels.apply(lambda d: d[0])
    preds['predicted_label'] = preds.labels.apply(lambda d: d[1])

    # drop columns we won't need
    preds.drop(
        labels=['logits', 'labels', 'embryo_filepath'], axis=1, inplace=True, errors='ignore'
    )

    # the columns in both the annotations and the predictions that we will use to merge;
    # this is the set of columns required to uniquely identify each frame
    merge_columns = ['dataset_id', 'fov_id', 'embryo_id', 'frame_ind']

    # coerce the columns we need for the merge
    for df in (annotations, preds):
        for column in merge_columns:
            df[column] = df[column].astype(str)

    # merge the predictions and the manual annotations
    annotations_preds_merged = pd.merge(
        annotations, preds, on=merge_columns, how='inner', validate='one_to_one'
    )
    if annotations_preds_merged.empty:
        raise ValueError(
            'No predictions found for the given annotations. '
            'Check that the predictions file and annotations file are for the same dataset.'
        )

    _plot_confusion_matrix(
        true_labels=annotations_preds_merged.annotated_label.values,
        predicted_labels=annotations_preds_merged.predicted_label.values,
        labels=constants.EMBRYO_STAGE_LABELS,
    )
    plt.savefig(
        predictions_filepath.parent / f'{predictions_filepath.stem}--confusion-matrix.pdf',
        format='pdf',
    )


if __name__ == '__main__':
    main()
